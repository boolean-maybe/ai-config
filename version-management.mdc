---
description: Use when asked to create a pull request or make a release
globs:
alwaysApply: false
---
Rule Name: version-management
Description: Use when asked to create a pull request or make a release

# Version Management Guide

When the user says `make a release` follow Release Process
When the user says `make a dev/fix PR` follow Development Process

## Work Item
All work must be assigned a work item in the format `@W-XXX`. Ask user what work item to use
Offer the user a list of work item number/description to choose. Make this list using `getWorkForUsers` tool
- All commit messages must be prefixed with work item like `@W-XXX commit message`
- All pull request descriptions must follow the same format

## Version File
The project version is managed in [gradle.properties](mdc:gradle.properties). This file contains:
- Project version number
- Project group ID
- Dependencies and their versions

## Version Format
- Development versions use the `-SNAPSHOT` suffix (e.g., `0.2.7-SNAPSHOT`)
- Release versions remove the `-SNAPSHOT` suffix (e.g., `0.3.0`)

## Branch Naming
- Feature branches: `feature/*`
- Bugfix branches: `fix/*`
- Release branches: `release/*` (e.g., `release/0.3.0`)
- Main branches: `master` and `develop`

## Commit Message and Pull Request description
- Commit message should always start with `@W-XXX` where `W-XXX` is work item name. Ask user for this name
- Pull request description should follow the same format
- After `@W-XXX` commit message should include brief description on the same line then empty line then longer description

## Development Process
1. Run `./gradlew clean build` and verify it passes. Stop here on any error
2. Create feature or fix branch from `develop`
3. Add and commit all edited files following commit message guidelines
4. Push to remote
5. Create pull request to `develop` following pull request guidelines

## Release Process
1. Run `./gradlew clean build` and verify it passes. Stop here on any error
2. Create release branch from `develop`: `release/x.y.z`
3. Check current project version in `gradle.properties` in `origin/master` by using `git fetch origin master && git show origin/master:gradle.properties`
4. Update version in `gradle.properties` to be current `origin/master` version incremented by 1. For example, if the current version in `gradle.properties` in `origin/master` is 1.2.3 edit local `gradle.properties` to make it 1.2.4
5. Commit with a commit message `@W-XXX fix version` where `W-XXX` is a work item name
6. Push to remote branch
7. Create pull request to `master`
8. Pull request must have description beginning with `@W-XXX` where `W-XXX` is a work item name
9. Resolve conflict in `gradle.properties` in favor of the release branch. Commit with a message `@W-XXX resolve version conflict` where `W-XXX` is a work item name
10. After merge, tag the release in `master`

## When complete
When a PR is done - print its URL so it can easily be shared
